#!/bin/sh

cd /sys/kernel/config/usb_gadget
mkdir g1
cd g1

# Set the idVendor to Linux Foundation
echo 0x1d6b > idVendor
# Set the idProduct to Multifunction Composite Gadget
echo 0x0104 > idProduct
# Set the bcdDevice to v1.0.0
echo 0x0100 > bcdDevice
# Set the bcdUSB to USB 2.0
echo 0x0200 > bcdUSB

# These settings allow the device to be recognized in Windows
echo 0xEF > bDeviceClass
echo 0x02 > bDeviceSubClass
echo 0x01 > bDeviceProtocol

mkdir -p strings/0x409
echo "11223344" > strings/0x409/serialnumber
echo "DeepInSight"   > strings/0x409/manufacturer
echo "EK640_es"   > strings/0x409/product

# Setup the OS Descriptors for our RNDIS device to be automatically installed
echo 1  > os_desc/use
echo 0xcd  > os_desc/b_vendor_code
echo MSFT100 > os_desc/qw_sign

# Allow the gadget to be used as a network device
mkdir -p functions/rndis.usb0
echo RNDIS  > functions/rndis.usb0/os_desc/interface.rndis/compatible_id
echo 5162001 > functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id

mkdir -p configs/c.1
echo 250 > configs/c.1/MaxPower
if [ ! -e os_desc/c.1 ]; then
ln -s configs/c.1 os_desc/
fi
if [ ! -e configs/c.1/rndis.usb0 ]; then
ln -s functions/rndis.usb0 configs/c.1/
fi

udevadm settle -t 5 || :

# Clear the UDC file if we have been here before
# This avoids errors if we run this script twice
# and allows us to essentially reset the interface if necessary
str=$(ls /sys/class/udc/)
if [[ $(< ./UDC) != "$str" ]]; then
  # We have not been here before (file does not match $str), so write the UDC file
  # For some unknown reason we need to write, clear, then write the file again
  ls /sys/class/udc/ > ./UDC
  sync
  echo "" > ./UDC
  sync
  ls /sys/class/udc/ > ./UDC
else
  # We have been here before, so clear the UDC file first
  echo "" > ./UDC
  sync
  ls /sys/class/udc/ > ./UDC
  sync
  echo "" > ./UDC
  sync
  ls /sys/class/udc/ > ./UDC
fi


ifconfig usb0 10.0.0.1
ifconfig usb0 up
